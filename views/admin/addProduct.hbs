<div class="main-content">

    <div class="page-content">
        <div class="container-fluid">

            <!-- start page title -->
            <div class="row">
                <div class="col-12">
                    <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                        <h4 class="mb-sm-0 font-size-18">Add Product</h4>

                        <div class="page-title-right">
                            <ol class="breadcrumb m-0">
                                <li class="breadcrumb-item"><a href="javascript: void(0);">Ecommerce</a></li>
                                <li class="breadcrumb-item active">Add Product</li>
                            </ol>
                        </div>

                    </div>
                </div>
            </div>
            <!-- end page title -->

            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">

                            <h4 class="card-title">Basic Information</h4>
                            <p class="card-title-desc">Fill all information below</p>

                            <form action="/addProduct/add" id="product_form" method="post" enctype="multipart/form-data">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="mb-3">
                                            <label for="productname">Product Name</label>
                                            <input id="productname" name="productname" type="text" class="form-control"
                                                placeholder="Product Name">
                                                <span class="error_form" id="productname_error_message"></span>
                                        </div>
                                        <div class="mb-3">
                                            <label for="manufacturerbrand">Manufacturer Brand</label>
                                            <input id="manufacturerbrand" name="manufacturerbrand" type="text"
                                                class="form-control" placeholder="Manufacturer Brand">
                                                <span class="error_form" id="brand_error_message"></span>
                                        </div>
                                        <div class="mb-3">
                                            <label for="productsize">Size</label>
                                            <input id="productsize" name="productsize" type="text"
                                                class="form-control" placeholder="Size">
                                        </div>
                                        <div class="mb-3">
                                            <label for="productprice">Price</label>
                                            <input id="productprice" name="productprice" type="number" class="form-control"
                                                placeholder="Price">
                                                <span class="error_form" id="price_error_message"></span>
                                        </div>
                                    </div>
                                    <input id="newPrice" name="newPrice" type="number" class="form-control" hidden>
                                    <input id="categoryOffer" name="categoryOffer" type="text" class="form-control" value="false" hidden>
                                    <input id="categoryDiscount" name="categoryDiscount" type="number" class="form-control" value="null" hidden>
                                    <input id="productOffer" name="productOffer" type="text" class="form-control" value="false" hidden>
                                    <input id="productDiscount" name="productDiscount" type="number" class="form-control" value="null" hidden>
                                    <div class="col-sm-6">
                                        <div class="mb-3">
                                            <label class="control-label">Category</label>
                                            <select name="id" class="form-control select2">
                                                {{#each cattDetails}}
                                                <option onclick="addProduct(event)" value="{{this.categoryName}}">{{this.categoryName}}</option>
                                                {{/each}}
                                            </select>
                                        </div>

                                        <div class="mb-3">
                                            <label class="control-label">Sub Category</label>
                                            <select name="id" class="form-control select2">
                                                {{#each scattDetails}}
                                                <option onclick="function check()">{{this.subCategory}}</option>
                                                {{/each}}
                                            </select>

                                        </div>
                                        <div class="mb-3">
                                            <label for="manufacturerquantity">Quantity</label>
                                            <input id="manufacturerquantity" name="manufacturerquantity" type="text"
                                                class="form-control" placeholder="Quantity">
                                                <span class="error_form" id="quantity_erroer_message"></span>
                                        </div>
                                        <div class="mb-3">
                                            <label for="productdescription">Product Description</label>
                                            <textarea class="form-control" name="description" id="productdescription" rows="5"
                                                placeholder="Product Description"></textarea>
                                                 <span class="error_form" id="description_error_message"></span>
                                        </div>

                                    </div>
                                </div>
                                <div class="fallback">
                                    <input name="image1" type="file" id="id_img1">
                                    <span class="error_form" id="image1_error_message"></span>
                                    <img width="100px" height="auto" src="" id="imgView1">
                                    <input name="image2" type="file" id="id_img2">
                                    <span class="error_form" id="image2_error_message"></span>
                                    <img width="100px" height="auto" src="" id="imgView2">
                                    <input name="image3" type="file" id="id_img3">
                                    <span class="error_form" id="image3_error_message"></span>
                                    <img width="100px" height="auto" src="" id="imgView3">
                                    <input name="image4" type="file" id="id_img4">
                                    <span class="error_form" id="image4_error_message"></span>
                                    <img width="100px" height="auto" src="" id="imgView4">
                                </div>
                                
                                <div class="d-flex flex-wrap gap-2">
                                    <button type="submit" class="btn btn-primary waves-effect waves-light" id="confirm-btn">Add
                                        Product</button>
                                    <button type="button"
                                        class="btn btn-secondary waves-effect waves-light">Cancel</button>
                                </div>
                                
                            </form>

                            <div class="col-md-5">
                                <div class="form-group">
                                    <div id="image-box" class="image-container"></div>
                                    <button class="btn btn-outline-info" id="crop-btn"
                                        style=" margin-top: 10px; display: none;" type="button">Crop</button>
                                </div>
                             </div>


                        </div>
                    </div>

                    

                    
                </div>
            </div>
            <!-- end row -->

        </div> <!-- container-fluid -->
    </div>
    <!-- End Page-content -->


    <footer class="footer">
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-6">
                    <script>document.write(new Date().getFullYear())</script> Â© Skote.
                </div>
                <div class="col-sm-6">
                    <div class="text-sm-end d-none d-sm-block">
                        Design & Develop by Themesbrand
                    </div>
                </div>
            </div>
        </div>
    </footer>
</div>




<script>
    const imagebox = document.getElementById('image-box')
    // crop-btn is the id of button that will trigger the event of change original file with cropped file.
    const crop_btn = document.getElementById('crop-btn')
    // id_image is the id of the input tag where we will upload the image
    const input = document.getElementById('id_img1')
    const input1 = document.getElementById('id_img2')
    const input2 = document.getElementById('id_img3')
    const input3 = document.getElementById('id_img4')

    var allowedExtensions =
        /(\.jpg|\.jpeg|\.png|\.gif)$/i;

    var filePath = input.value;

    // When user uploads the image this event will get triggered
    input.addEventListener('change', () => {
        if (!allowedExtensions.exec(input.value)) {
            alert('Invalid file type');
            input.value = '';
        }
        else {
            // Getting image file object from the input variable
            const img_data = input.files[0]
            // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
            // The new object URL represents the specified File object or Blob object.
            const url = URL.createObjectURL(img_data)

            // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
            imagebox.innerHTML = `<img src="${url}" id="image" style="width:100%;">`

            // Storing that cropping view image in a variable
            const image = document.getElementById('image')

            // Displaying the image box
            document.getElementById('image-box').style.display = 'block'
            // Displaying the Crop buttton
            document.getElementById('crop-btn').style.display = 'block'
            // Hiding the Post button
            document.getElementById('confirm-btn').style.display = 'none'

            // Creating a croper object with the cropping view image
            // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
            // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                aspectRatio: 1 / 1.28,
                //  preview: '.preview',
                minCropBoxWidth: 200,
                minCropBoxHeight: 200,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    let fileInputElement = document.getElementById('id_img1');
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container
                    let container = new DataTransfer();
                    // Add the cropped image file to the container
                    container.items.add(file);
                    // Replace the original image file with the new cropped image file
                    fileInputElement.files = container.files;
                    console.log(container.files[0])
                    let img = container.files[0]
                    const url = URL.createObjectURL(img)
                    document.getElementById('imgView1').src = url




                    // Hide the cropper box
                    document.getElementById('image-box').style.display = 'none'
                    // Hide the crop button
                    document.getElementById('crop-btn').style.display = 'none'
                    // Display the Post button
                    document.getElementById('confirm-btn').style.display = 'block'

                },'image/webp', 0.5);
            });
        }
    });



    

    input1.addEventListener('change', () => {
        if (!allowedExtensions.exec(input1.value)) {
            alert('Invalid file type');
            input1.value = '';
        }
        else {
            // Getting image file object from the input variable
            const img_data = input1.files[0]
            // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
            // The new object URL represents the specified File object or Blob object.
            const url = URL.createObjectURL(img_data)

            // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
            imagebox.innerHTML = `<img src="${url}" id="image" style="width:100%;">`

            // Storing that cropping view image in a variable
            const image = document.getElementById('image')

            // Displaying the image box
            document.getElementById('image-box').style.display = 'block'
            // Displaying the Crop buttton
            document.getElementById('crop-btn').style.display = 'block'
            // Hiding the Post button
            document.getElementById('confirm-btn').style.display = 'none'

            // Creating a croper object with the cropping view image
            // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
            // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                aspectRatio: 1 / 1.28,
                //  preview: '.preview',
                minCropBoxWidth: 200,
                minCropBoxHeight: 200,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    let fileInputElement = document.getElementById('id_img2');
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container
                    let container = new DataTransfer();
                    // Add the cropped image file to the container
                    container.items.add(file);
                    // Replace the original image file with the new cropped image file
                    fileInputElement.files = container.files;
                    console.log(container.files[0])
                    let img = container.files[0]
                    const url = URL.createObjectURL(img)
                    document.getElementById('imgView2').src = url




                    // Hide the cropper box
                    document.getElementById('image-box').style.display = 'none'
                    // Hide the crop button
                    document.getElementById('crop-btn').style.display = 'none'
                    // Display the Post button
                    document.getElementById('confirm-btn').style.display = 'block'

                },'image/webp', 0.5);
            });
        }
    });


    input2.addEventListener('change', () => {
        if (!allowedExtensions.exec(input2.value)) {
            alert('Invalid file type');
            input2.value = '';
        }
        else {
            // Getting image file object from the input variable
            const img_data = input2.files[0]
            // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
            // The new object URL represents the specified File object or Blob object.
            const url = URL.createObjectURL(img_data)

            // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
            imagebox.innerHTML = `<img src="${url}" id="image" style="width:100%;">`

            // Storing that cropping view image in a variable
            const image = document.getElementById('image')

            // Displaying the image box
            document.getElementById('image-box').style.display = 'block'
            // Displaying the Crop buttton
            document.getElementById('crop-btn').style.display = 'block'
            // Hiding the Post button
            document.getElementById('confirm-btn').style.display = 'none'

            // Creating a croper object with the cropping view image
            // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
            // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                aspectRatio: 1 / 1.28,
                //  preview: '.preview',
                minCropBoxWidth: 200,
                minCropBoxHeight: 200,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    let fileInputElement = document.getElementById('id_img3');
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container
                    let container = new DataTransfer();
                    // Add the cropped image file to the container
                    container.items.add(file);
                    // Replace the original image file with the new cropped image file
                    fileInputElement.files = container.files;
                    console.log(container.files[0])
                    let img = container.files[0]
                    const url = URL.createObjectURL(img)
                    document.getElementById('imgView3').src = url




                    // Hide the cropper box
                    document.getElementById('image-box').style.display = 'none'
                    // Hide the crop button
                    document.getElementById('crop-btn').style.display = 'none'
                    // Display the Post button
                    document.getElementById('confirm-btn').style.display = 'block'

                },'image/webp', 0.5);
            });
        }
    });



    input3.addEventListener('change', () => {
        if (!allowedExtensions.exec(input3.value)) {
            alert('Invalid file type');
            input3.value = '';
        }
        else {
            // Getting image file object from the input variable
            const img_data = input3.files[0]
            // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
            // The new object URL represents the specified File object or Blob object.
            const url = URL.createObjectURL(img_data)

            // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
            imagebox.innerHTML = `<img src="${url}" id="image" style="width:100%;">`

            // Storing that cropping view image in a variable
            const image = document.getElementById('image')

            // Displaying the image box
            document.getElementById('image-box').style.display = 'block'
            // Displaying the Crop buttton
            document.getElementById('crop-btn').style.display = 'block'
            // Hiding the Post button
            document.getElementById('confirm-btn').style.display = 'none'

            // Creating a croper object with the cropping view image
            // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
            // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                aspectRatio: 1 / 1.28,
                //  preview: '.preview',
                minCropBoxWidth: 200,
                minCropBoxHeight: 200,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    let fileInputElement = document.getElementById('id_img4');
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container
                    let container = new DataTransfer();
                    // Add the cropped image file to the container
                    container.items.add(file);
                    // Replace the original image file with the new cropped image file
                    fileInputElement.files = container.files;
                    console.log(container.files[0])
                    let img = container.files[0]
                    const url = URL.createObjectURL(img)
                    document.getElementById('imgView4').src = url




                    // Hide the cropper box
                    document.getElementById('image-box').style.display = 'none'
                    // Hide the crop button
                    document.getElementById('crop-btn').style.display = 'none'
                    // Display the Post button
                    document.getElementById('confirm-btn').style.display = 'block'

                },'image/webp', 0.5);
            });
        }
    });



    
</script>

<script type="text/javascript">
$("#productname_error_message").hide()
$("#brand_error_message").hide()
$("#description_error_message").hide()
$("#price_error_message").hide()
$("#quantity_erroer_message").hide()
$("#image1_error_message").hide()
$("#image2_error_message").hide()
$("#image3_error_message").hide()
$("#image4_error_message").hide()



var error_productname=false;
var error_brand=false;
var error_description=false;
var error_price=false;
var error_quantity=false
var error_image1=false
var error_image2=false
var error_image3=false
var error_image4=false

   $("#productname").focusout(function(){
            check_productname();
         });
         $("#manufacturerbrand").focusout(function() {
            check_brand();
         });
         $("#productdescription").focusout(function() {
           check_description()
         });
         $("#productprice").focusout(function() {
            check_price();
         });
          $("#manufacturerquantity").focusout(function() {
            check_quantity();
         });
          $("#id_img1").focusout(function() {
            check_image1();
         });
          $("#id_img2").focusout(function() {
            check_image2();
         });
          $("#id_img3").focusout(function() {
            check_image3();
         });
          $("#id_img4").focusout(function() {
            check_image4();
         });
        
        

         function check_productname() {
            var pattern = /^[a-zA-Z" "]*$/;
            var pname = $("#productname").val();
            if (pattern.test(pname) && pname !== '') {
               $("#productname_error_message").hide();
               $("#productname").css("border-bottom","2px solid #34F458");
            } else {
               $("#productname_error_message").html("Should contain only Characters");
               $("#productname_error_message").show();
               $("#productname").css("border-bottom","2px solid #F90A0A");
               error_productname = true;
            }
         }

         function check_brand() {
            var pattern = /^[a-zA-Z " "]*$/;
            var brand = $("#manufacturerbrand").val()
            if (pattern.test(brand) && brand !== '') {
               $("#brand_error_message").hide();
               $("#manufacturerbrand").css("border-bottom","2px solid #34F458");
            } else {
               $("#brand_error_message").html("Should contain only Characters");
               $("#brand_error_message").show();
               $("#manufacturerbrand").css("border-bottom","2px solid #F90A0A");
               error_brand = true;
            }
         }
           function check_description() {
            var pattern = /^[a-zA-Z " "]*$/;
            var description = $("#productdescription").val()
            if (pattern.test(description) && description !== '') {
               $("#description_error_message").hide();
               $("#productdescription").css("border-bottom","2px solid #34F458");
            } else {
               $("#description_error_message").html("Should contain only Characters");
               $("#description_error_message").show();
               $("#productdescription").css("border-bottom","2px solid #F90A0A");
               error_description = true;
            }
         }

        

       
       
          function check_price() {
            var pattern = /^[0-9]+$/
            var price= $("#productprice").val();
            if (pattern.test(price) && price !== '') {
               $("#price_error_message").hide();
               $("#productprice").css("border-bottom","2px solid #34F458");
            } else {
               $("#price_error_message").html("Only Numbers");
               $("#price_error_message").show();
               $("#productprice").css("border-bottom","2px solid #F90A0A");
               error_price = true;
            }
         }

          function check_quantity() {
            var pattern = /^[0-9]+$/
            var price= $("#manufacturerquantity").val();
            if (pattern.test(price) && price !== '') {
               $("#quantity_erroer_message").hide();
               $("#manufacturerquantity").css("border-bottom","2px solid #34F458");
            } else {
               $("#quantity_erroer_message").html("Only Numbers");
               $("#quantity_erroer_message").show();
               $("#manufacturerquantity").css("border-bottom","2px solid #F90A0A");
               error_quantity = true;
            }
         }

         function check_image1(){
           var image1=$("#id_img1").val();
           if(image1!==""){
             $("#image1_error_message").hide();
               $("#id_img1").css("border-bottom","2px solid #34F458");
          
           }else{
                $("#image1_error_message").html("choose image");
               $("#image1_error_message").show();
               $("#id_img1").css("border-bottom","2px solid #F90A0A");
               error_image1 = true;
           }
         }
         function check_image2(){
           var image1=$("#id_img2").val();
           if(image1!==""){
             $("#image2_error_message").hide();
               $("#id_img2").css("border-bottom","2px solid #34F458");
          
           }else{
                $("#image2_error_message").html("choose image");
               $("#image2_error_message").show();
               $("#id_img2").css("border-bottom","2px solid #F90A0A");
               error_image2 = true;
           }
         }
         function check_image3(){
           var image1=$("#id_img3").val();
           if(image1!==""){
             $("#image3_error_message").hide();
               $("#id_img3").css("border-bottom","2px solid #34F458");
          
           }else{
                $("#image3_error_message").html("choose image");
               $("#image3_error_message").show();
               $("#id_img3").css("border-bottom","2px solid #F90A0A");
               error_image3 = true;
           }
         }
        function check_image4(){
           var image1=$("#id_img4").val();
           if(image1!==""){
             $("#image4_error_message").hide();
               $("#id_img4").css("border-bottom","2px solid #34F458");
          
           }else{
                $("#image4_error_message").html("choose image");
               $("#image4_error_message").show();
               $("#id_img4").css("border-bottom","2px solid #F90A0A");
               error_image4 = true;
           }
         }

         $("#product_form").submit(function() {
          error_productname=false;
           error_brand=false;
           error_description=false;
           error_price=false;
           error_quantity=false
           error_image1=false
           error_image2=false
           error_image3=false
           error_image4=false
           

           

            check_productname()
            check_brand()
            check_description()
            check_price()
            check_quantity()
            check_image1()
             check_image1()

             check_image2()         
              check_image3()   
              check_image4() 

            


            if (error_productname=== false && error_brand === false && error_description === false && error_price === false&&error_quantity==false &&error_image1===false &&error_image2===false  &&error_image3===false &&error_image4===false ) {
               
               return true;
            } else {
               swal("Please Fill the form Correctly");
               return false;
            }


         });
     


</script>